[{"title":"ExcelUtils","date":"2017-05-03T01:47:36.000Z","path":"2017/05/03/注解ExcelUtils/","text":"ExcelUtilspublic class ExcelUtils { /** * 为单元格设值 * * @param hs 工作区对象 * @param row 单元格所在行数 * @param col 单元格所在列数 * @param value 设置的值 */ public static void setValue(Sheet hs, int row, int col, String value) { setValue(hs, row, col, value, null); } /** * 为单元格设值 * * @param style 单元格样式对象 */ public static void setValue(Sheet hs, int row, int col, String value, CellStyle style) { Row hr = hs.getRow(row) == null ? hs.createRow(row) : hs.getRow(row); Cell hc = hr.getCell(col) == null ? hr.createCell(col) : hr.getCell(col); if (null != style) { hc.setCellStyle(style); } hc.setCellValue(value); } /** * 为单元格设值，同时给单元格添加边框。 * * @param wb 单元格所在excel对象 * @param hs 单元格所在工作区对象 * @param row 单元格所在行数 * @param col 单元格所在列数 * @param value 设置的值 */ public static void setValueWithBorder(Workbook wb, Sheet hs, int row, int col, String value) { setValueWithBorder(wb, hs, row, col, value, null); } /** * 为单元格设值，同时给单元格添加边框。 * * @param style 单元格样式对象 */ public static void setValueWithBorder(Workbook wb, Sheet hs, int row, int col, String value, CellStyle style) { Row hr = hs.getRow(row) == null ? hs.createRow(row) : hs.getRow(row); Cell hc = hr.getCell(col) == null ? hr.createCell(col) : hr.getCell(col); CellStyle cs; if (null != style) { cs = style; } else { cs = wb.createCellStyle(); } setCsBorder(cs); hc.setCellStyle(cs); hc.setCellValue(value); } /** * 为单元格设值，同时给单元格添加边框。 * * @param wb * @param hs * @param row * @param col * @param value */ public static void setValueWithColor(Workbook wb, Sheet hs, int row, int col, String value) { Row hr = hs.getRow(row) == null ? hs.createRow(row) : hs.getRow(row); Cell hc = hr.getCell(col) == null ? hr.createCell(col) : hr.getCell(col); CellStyle cs; cs = wb.createCellStyle(); setCsBorder(cs); Font font = wb.createFont(); font.setColor(Font.COLOR_RED); cs.setFont(font); hc.setCellStyle(cs); hc.setCellValue(value); } /** * 给单元格设置边框 * * @param cs */ public static void setCsBorder(CellStyle cs) { cs.setBorderBottom(CellStyle.BORDER_THIN); cs.setBorderLeft(CellStyle.BORDER_THIN); cs.setBorderRight(CellStyle.BORDER_THIN); cs.setBorderTop(CellStyle.BORDER_THIN); } /** * 给单元格设值 * * @param cell 单元格对象 * @param value 设置的值 */ public static void setCellValue(Cell cell, Object value) { if (value == null) { return; } if (value instanceof Long || value instanceof Integer || value instanceof Double) { cell.setCellValue(Double.valueOf(String.valueOf(value))); } else { cell.setCellValue(String.valueOf(value)); } } /** * 调用此方法，直接下载到客户端 * * @param response * @param fileName */ public static void download(HttpServletResponse response, Workbook workbook, String fileName) throws FileNotFoundException, SecurityException, IllegalArgumentException, IOException, NoSuchMethodException, IllegalAccessException, InvocationTargetException { response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=\\&quot;&quot; + new String(fileName.getBytes(&quot;gb2312&quot;), &quot;iso8859-1&quot;) + &quot;\\&quot;&quot;); response.setContentType(&quot;APPLICATION/msexcel&quot;); OutputStream out = response.getOutputStream(); workbook.write(out); out.close(); } /** * 从url读出excel */ public static Workbook loadWorkbook(String filePath) throws FileNotFoundException, IOException { InputStream inputStream = new FileInputStream(filePath); boolean isExcel = filePath.toLowerCase().endsWith(&quot;xls&quot;) ? true : false; Workbook workbook = isExcel ? new HSSFWorkbook(inputStream) : new XSSFWorkbook(inputStream); return workbook; } /** * 把excel保存到磁盘 */ public static void saveToHarddisk(String url, Workbook workbook) throws IOException { BufferedOutputStream bo = new BufferedOutputStream(new FileOutputStream(url)); workbook.write(bo); bo.close(); } /** * 合并单元格 * * @param sheet * @param startRow 开始单元格所在行 * @param startCol 开始单元格所在列 * @param endRow 结束单元格所在行 * @param endCol 结束单元格所在列 */ public static void mergeRegion(Sheet sheet, int startRow, short startCol, int endRow, short endCol, CellStyle cs) { CellRangeAddress address = new CellRangeAddress(startRow, endRow, startCol, endCol); sheet.addMergedRegion(address); if (cs != null) { setRegionStyle(sheet, address, cs); } } private static void setRegionStyle(Sheet sheet, CellRangeAddress cellRangeAddress, CellStyle cs) { for (int i = cellRangeAddress.getFirstColumn(); i &lt;= cellRangeAddress.getLastColumn(); i++) { Row row = sheet.getRow(i) == null ? sheet.createRow(i) : sheet.getRow(i); for (int j = cellRangeAddress.getFirstColumn(); j &lt;= cellRangeAddress.getLastColumn(); j++) { Cell cell = row.getCell(j) == null ? row.createCell(j) : row.getCell(j); cell.setCellStyle(cs); } } } /** * 创建样式 * * @param workbook * @param color */ public static CellStyle createFCStyle(Workbook workbook, short color) { CellStyle style = workbook.createCellStyle(); Font fort = workbook.createFont(); fort.setColor(color); style.setFont(fort); return style; } /** * 拷贝excel区域 * * @param wb * @param sourceSheetIndex * @param pTargetSheetIndex * @param pStartRow * @param pEndRow * @param pPosition */ public static void copyRows(Workbook wb, int sourceSheetIndex, int pTargetSheetIndex, int pStartRow, int pEndRow, int pPosition) { Sheet sourceSheet = wb.getSheetAt(sourceSheetIndex); Sheet targetSheet = wb.getSheetAt(pTargetSheetIndex); copyRows(wb, sourceSheet, targetSheet, pStartRow, pEndRow, pPosition); } /** * 拷贝excel区域 * * @param wb * @param pSourceSheetName 源sheet * @param pTargetSheetName 目标sheet * @param pStartRow 开始行 * @param pEndRow 结束行 * @param pPosition 目标sheet的开始行 */ public static void copyRows(Workbook wb, String pSourceSheetName, String pTargetSheetName, int pStartRow, int pEndRow, int pPosition) { Sheet sourceSheet = wb.getSheet(pSourceSheetName); Sheet targetSheet = wb.getSheet(pTargetSheetName); copyRows(wb, sourceSheet, targetSheet, pStartRow, pEndRow, pPosition); } /** * 拷贝excel区域 */ private static void copyRows(Workbook wb, Sheet sourceSheet, Sheet targetSheet, int pStartRow, int pEndRow, int pPosition) { Row sourceRow = null; Row targetRow = null; Cell sourceCell = null; Cell targetCell = null; CellRangeAddress region = null; int cType; int i; int j; int targetRowFrom; int targetRowTo; if ((pStartRow == -1) || (pEndRow == -1)) { return; } // 拷贝合并的单元格 for (i = 0; i &lt; sourceSheet.getNumMergedRegions(); i++) { region = sourceSheet.getMergedRegion(i); if ((region.getFirstRow() &gt;= pStartRow) &amp;&amp; (region.getLastRow() &lt;= pEndRow)) { targetRowFrom = region.getFirstRow() - pStartRow + pPosition; targetRowTo = region.getLastRow() - pStartRow + pPosition; region.setFirstRow(targetRowFrom); region.setLastRow(targetRowTo); targetSheet.addMergedRegion(region); } } // 设置列宽 for (i = pStartRow; i &lt;= pEndRow; i++) { sourceRow = sourceSheet.getRow(i); if (sourceRow != null) { for (j = sourceRow.getLastCellNum(); j &gt;= sourceRow.getFirstCellNum(); j--) { targetSheet.setColumnWidth(j, sourceSheet.getColumnWidth(j)); targetSheet.setColumnHidden(j, false); } break; } } // 拷贝行并填充数据 for (; i &lt;= pEndRow; i++) { sourceRow = sourceSheet.getRow(i); if (sourceRow == null) { continue; } targetRow = targetSheet.createRow(i - pStartRow + pPosition); targetRow.setHeight(sourceRow.getHeight()); for (j = sourceRow.getFirstCellNum(); j &lt; sourceRow.getPhysicalNumberOfCells(); j++) { sourceCell = sourceRow.getCell(j); if (sourceCell == null) { continue; } targetCell = targetRow.createCell(j); // targetCell.setEncoding(sourceCell.getEncoding()); targetCell.setCellStyle(sourceCell.getCellStyle()); cType = sourceCell.getCellType(); targetCell.setCellType(cType); switch (cType) { case Cell.CELL_TYPE_BOOLEAN: targetCell.setCellValue(sourceCell.getBooleanCellValue()); break; case Cell.CELL_TYPE_ERROR: targetCell.setCellErrorValue(sourceCell.getErrorCellValue()); break; case Cell.CELL_TYPE_FORMULA: targetCell.setCellFormula(parseFormula(sourceCell.getCellFormula())); break; case Cell.CELL_TYPE_NUMERIC: targetCell.setCellValue(sourceCell.getNumericCellValue()); break; case Cell.CELL_TYPE_STRING: targetCell.setCellValue(sourceCell.getRichStringCellValue()); break; } } } } private static String parseFormula(String pPOIFormula) { final String cstReplaceString = &quot;ATTR(semiVolatile)&quot;; //$NON-NLS- StringBuffer result = null; int index; result = new StringBuffer(); index = pPOIFormula.indexOf(cstReplaceString); if (index &gt;= 0) { result.append(pPOIFormula.substring( index)); result.append(pPOIFormula.substring(index + cstReplaceString.length())); } else { result.append(pPOIFormula); } return result.toString(); } public static String getCellStringValue(Cell cell) { return getCellStringValue(cell, null); } public static String getCellStringValue(Cell cell, DecimalFormat decimalFormat) { DecimalFormat df = decimalFormat == null ? new DecimalFormat(&quot;#&quot;) : decimalFormat; String text = &quot;&quot;; // 判断单元格的类别,并且全部转换成String 类型 switch (cell.getCellType()) { case 0: // Numeric text = StringUtils.trimToEmpty(df.format(cell.getNumericCellValue())); break; case 1: // String text = StringUtils.trimToEmpty(cell.getStringCellValue()); default: text = StringUtils.trimToEmpty(cell.getStringCellValue()); break; } return text; } public static void main(String[] args) { try { InputStream inputStream = new FileInputStream(&quot;d:\\\\test.xls&quot;); Workbook wb = true ? new HSSFWorkbook(inputStream) : new XSSFWorkbook(inputStream); //source ,target 为,源sheet 页和目标sheet页, // copyRows(wb, &quot;Sheet, &quot;Sheet, ; // wb.cloneSheet(; // wb.setSheetName( &quot;Sheet); setValue(wb.getSheetAt(0), 5, 5, &quot;ddd&quot;); setValueWithBorder(wb, wb.getSheetAt(0), 5, 8, &quot;ddd2&quot;); FileOutputStream fileOut = new FileOutputStream(&quot;d:\\\\testxls&quot;); wb.write(fileOut); fileOut.flush(); fileOut.close(); System.out.println(&quot;Operation finished&quot;); } catch (Exception e) { e.printStackTrace(); } } public static String cellToString(Cell cell) { if (cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC) { return String.valueOf(cell.getNumericCellValue()); } else if (cell.getCellType() == HSSFCell.CELL_TYPE_BOOLEAN) { return String.valueOf(cell.getBooleanCellValue()); } else if (cell.getCellType() == HSSFCell.CELL_TYPE_FORMULA) { return String.valueOf(cell.getCellFormula()); } else { return cell.getStringCellValue(); } } /** * 读取 excel */ public static &lt;T&gt; List&lt;T&gt; readExcel(Class&lt;T&gt; clazz, String fileName, InputStream is) throws Exception { String extension = fileName.lastIndexOf(&quot;.&quot;) == -1 ? &quot;&quot; : fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1); // 构造 Workbook 对象 Workbook workbook = null; if (&quot;xls&quot;.equals(extension)) { // workbook = new HSSFWorkbook(is); } else if (&quot;xlsx&quot;.equals(extension)) { // workbook = new XSSFWorkbook(is); } else { throw new IOException(&quot;不支持的文件类型&quot;); } // 读取第一页表格 Sheet sheet = workbook.getSheetAt(0); Object value = null; Row row = null; Cell cell = null; int counter = 0; //列名、字段 Map&lt;String, String&gt; columnMap = new HashMap(); Field[] fields = getBeanFields(clazz, new Field[]{}); for (Field f : fields) { ExcelAnnotation annotation = f.getAnnotation(ExcelAnnotation.class); if (annotation != null) { if (!columnMap.containsKey(annotation.columnName())) columnMap.put(annotation.columnName(), f.getName()); } } //格式化器 DecimalFormat df = new DecimalFormat(&quot;0&quot;);// 格式化 number String SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);// 格式化日期字符串 DecimalFormat nf = new DecimalFormat(&quot;0.00&quot;);// 格式化数字 //临时变量 T t = null; //结果列表 List&lt;T&gt; resultList = new ArrayList&lt;T&gt;(); //行，从第二行开始 for (int i = 1; i &lt;= sheet.getLastRowNum(); i++) { row = sheet.getRow(i); if (row == null) { continue; } else { counter++; } t = clazz.newInstance(); //列， for (int j = 0; j &lt;= row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell == null) { continue; } switch (cell.getCellType()) { case XSSFCell.CELL_TYPE_STRING: value = cell.getStringCellValue(); break; case XSSFCell.CELL_TYPE_NUMERIC: if (&quot;@&quot;.equals(cell.getCellStyle().getDataFormatString())) { value = df.format(cell.getNumericCellValue()); } else if (&quot;General&quot;.equals(cell.getCellStyle().getDataFormatString())) { value = nf.format(cell.getNumericCellValue()); } else { value = sdf.format(HSSFDateUtil.getJavaDate(cell.getNumericCellValue())); } break; case XSSFCell.CELL_TYPE_BOOLEAN: value = cell.getBooleanCellValue(); break; case XSSFCell.CELL_TYPE_BLANK: value = &quot;&quot;; break; default: value = cell.toString(); } if (value == null || &quot;&quot;.equals(value)) { continue; } // 第二个参数通过标题获取属性名 String columnName = sheet.getRow(0).getCell(j).toString(); org.apache.commons.beanutils.BeanUtils.setProperty(t, columnMap.get(columnName), value); } resultList.add(t); } return resultList; } private static Field[] getBeanFields(Class clazz, Field[] fs){ fs = (Field[]) ArrayUtils.addAll(fs, clazz.getDeclaredFields()); if(clazz.getSuperclass()!=null){ Class clsSup = clazz.getSuperclass(); fs = getBeanFields(clsSup, fs); } return fs; } } ExcelAnnotation@Retention(RetentionPolicy.RUNTIME) // 注解会在class字节码文件中存在，在运行时可以通过反射获取到 @Target({ElementType.FIELD}) public @interface ExcelAnnotation { /** * 列名 * * @return */ String columnName() default &quot;&quot;; }","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具类","slug":"工具类","permalink":"http://yoursite.com/tags/工具类/"}]},{"title":"angularjs基本学习笔记","date":"2017-03-17T06:46:36.000Z","path":"2017/03/17/angularjs基本学习笔记/","text":"更新时间 2017-3-17 表达式双大括号表示{{model}} 通过$interpolateProvider的配置来更换表示符号 var Myapp=angualr.module(&apos;Myapp&apos;,[]) .config(function($interpolateProvider){ $interpolateProvider.startSymbol(&apos;[[&apos;).endSymbol(&apos;]]&apos;); }); 表达式就可以更换为 [[model]] 基本指令ng-app=&quot;myApp&quot;定义一个名字为myApp的应用程序，这个指令使用在标 签当中，标签开始到结束就是改App的应用范围。 ng-controller指令定义了应用程序控制器，一些事件和操作写在里面。 一个js文件的基本格式Var myApp=angular.module(&apos;myApp&apos;,[]); myApp.config(function(){ ......... }); myApp.filter(&apos;filter&apos;,function(){ ................... }); myApp.controller(&apos;myController&apos;,function($scope,$http){ function init(){ ...................... } init(); }) 依赖注入有5个核心组件作为依赖注入 value factory service provider constant 例子 valuevar app=angular.module(&apos;app&apos;,[]); app.value(&apos;name&apos;,5); name=5 factoryfactory作为一个函数的返回值 mainApp.factory(&apos;MathService&apos;, function() { var factory = {}; factory.multiply = function(a, b) { return a * b } return factory; }); service// 在 service 中注入 factory &quot;MathService&quot; mainApp.service(&apos;CalcService&apos;, function(MathService){ this.square = function(a) { return MathService.multiply(a,a); } }); 在Controller调用这些服务mainApp.controller(&apos;CalcController&apos;, function($scope, CalcService, defaultInput) { $scope.number = defaultInput; $scope.result = CalcService.square($scope.number); $scope.square = function() { $scope.result = CalcService.square($scope.number); } }); Provider也可以定义factory和ServicemainApp.config(function($provide) { $provide.provider(&apos;MathService&apos;, function() { this.$get = function() { var factory = {}; factory.multiply = function(a, b) { return a * b; } return factory; }; }); }); constantconstant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。 mainApp.constant(&quot;configParam&quot;, &quot;constant value&quot;);","categories":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/categories/笔记/"}],"tags":[{"name":"angularjs","slug":"angularjs","permalink":"http://yoursite.com/tags/angularjs/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/笔记/"}]},{"title":"关于在angularjs中使用jQuery的ajax异步请求回调函数不刷新model的问题","date":"2017-03-06T14:58:02.000Z","path":"2017/03/06/关于在angularjs中使用jQuery的ajax异步请求回调函数不刷新model的问题/","text":"问题最近项目页面用到angularjs，没学过就仿造里面自带的例子就上手了项目开发，按照里面的写法刚开始还很好使，但是用着用着还是会有些地方 会用上jQuery的东西，其中就有ajax的异步请求，后台功能写好了以后测试提交发现页面无法显示model的值，虽然进入了回调函数值也有了，但 是页面显示不出来，等第二次提交的时候才会显示出来，于是我猜是两个问题： 可能处于不同的域 model没有刷新 然后仔细看了一下域是同一个页面也不是什么对象也没有用其他会产生子域的angular指令，所以域是相同的 后来百度了一下果然不止我一个人有这个问题，其中原因就是用jQuery的ajax回调造成不刷新的问题 解决办法$scope.$apply(); 或者 $scope.$apply(function (){ ....你变更的数据 }); Scope提供$watch方法监视Model的变化。 Scope提供$apply方法传播Model的变化。 Scope可以继承，用来隔离不同的application components和属性访问权限。 Scope为Expressions的计算提供上下文。 $apply()实际上是由scope.digest()完成的，但是我们几乎从来就没有直接调用过这个方法，而是调用scope.apply()方法， 是因为在scope.apply()方法里面，它会去调用scope.digest()方法。scope.apply()方法带一个函数或者一个表达式，然后执行它，最后调用 scope.digest()方法去更新bindings或者watchers。 相关文章相关–angularJS中$apply()方法详解 相关– 理解Angular中的$apply()以及$digest() Understanding Angular’s $apply() and $digest()","categories":[{"name":"问题","slug":"问题","permalink":"http://yoursite.com/categories/问题/"}],"tags":[{"name":"angularjs","slug":"angularjs","permalink":"http://yoursite.com/tags/angularjs/"},{"name":"问题","slug":"问题","permalink":"http://yoursite.com/tags/问题/"},{"name":"jQuery ajax","slug":"jQuery-ajax","permalink":"http://yoursite.com/tags/jQuery-ajax/"}]},{"title":"Hello World","date":"2017-03-05T02:51:22.000Z","path":"2017/03/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"Hexo使用","slug":"Hexo使用","permalink":"http://yoursite.com/tags/Hexo使用/"},{"name":"开始","slug":"开始","permalink":"http://yoursite.com/tags/开始/"}]},{"title":"第一次搭建Hexo+Github个人博客","date":"2017-03-05T02:51:22.000Z","path":"2017/03/05/第一次搭建Hexo+Github个人博客/","text":"你好，欢迎来到个人博客。搭建方法用github账户新建一个仓库，命名为：username.github.io默认安装node.js 打开cmdnode -v npm -v 安装git任意路径任意名字新建文件夹进入新建文件夹打开git Bash 命令行窗口输入命令:npm install hexo -g 输入命令hexo init 生成静态页面hexo generate 本地启动hexo server 浏览器输入 http://localhost:4000 修改 _config.yml 输入命令vim _config.yml 去到最后一行修改你的github仓库地址deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master 执行命令npm install hexo-deployer-git --save 执行命令hexo deploy 访问你的github仓库地址yourname.github.io","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"奇淫技巧","slug":"奇淫技巧","permalink":"http://yoursite.com/tags/奇淫技巧/"},{"name":"配置","slug":"配置","permalink":"http://yoursite.com/tags/配置/"}]}]